<project basedir="." name="AJPOS" default="build">

	<!-- Definitions of variables used during the rest of this script -->

	<property name="build.dir" value="${basedir}/build"/>
	<property name="build.classes.dir" value="${build.dir}/classes"/>
	<property name="src.dir" value="${basedir}/src"/>
	<property name="dist.dir" value="${basedir}/dist"/>
	<property name="conf.dir" value="${basedir}/etc"/>
	<property name="doc.dir" value="${build.dir}/doc"/>
	
	<property file="application.properties"/>
	<loadproperties>
		<file file="application.properties"/>
	</loadproperties>

	<!-- Definitions of classpath variants used for different tasks -->

		<path id="compile.classpath">
			<fileset dir="lib">
				<include name="*.jar"/>
			</fileset>
		</path>
		
		<path id="test.classpath">
			<pathelement location="${build.classes.dir}"/>
			<!-- configuration -->
			<pathelement location="${conf.dir}"/>
			<fileset dir="lib">
				<include name="*.jar"/>
			</fileset>
			<pathelement location="${basedir}"/>
			<fileset dir="">
				<include name="*.properties"/>
			</fileset>
		</path>
	<!-- Definitions of runnable ant targets.
         Run them from the command line by executing "ant [targetname]"  -->

	<target name="run" depends="build" description="Run the application">
		<java classname="ee.ut.math.tvt.PATS.Intro"  classpathref="test.classpath" fork="yes" />
		
	</target>

	<target name="build" description="Build the system">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.classes.dir}"/>
		<javac
            srcdir="${src.dir}"
            destdir="${build.classes.dir}"
            debug="true"
            debuglevel="lines,vars,source"
            encoding="utf-8"
            compiler="modern"
            target="1.7"
            source="1.7"
			includeantruntime="false">
			<classpath refid="compile.classpath"/>
		</javac>

	</target>
	<!-- Clean up build system results -->
	<target name="clean" description="Clean up build system results">
		<delete dir="${build.dir}"/>
	</target>
	
	<!-- Git commit2 -->
	<macrodef name="git">
			<attribute name="command" />
			<attribute name="dir" default="" />
			<element name="args" optional="true" />
			<sequential>
				<echo message="git @{command}" />
				<exec executable="git" dir="@{dir}">
					<arg value="@{command}" />
					<args/>
				</exec>
			</sequential>
		</macrodef>
	 
		<target name="version" description="Commits all changes to version git">
			<input message="Commit message" addproperty="commit-message" />
			
			<echo message="Commiting all changes with message ${commit-message}" />
			<git command="add">
				<args>
					<arg value="." />
				</args>
			</git>
			<git command="commit">
				<args>
					<arg value="-am ${commit-message}" />
				</args>
			</git>
			<git command="push" />
		</target>
	<!-- Create JAR file in the folder build/jar with all classes, 
				two property files and other components -->
		<target name="dist" depends="build" description="Build project to JAR">
			<propertyfile
				file="version.properties"
				jdkproperties="true"
				comment="Version properties">
				<entry  key="build.revision.number" type="int" default="0" operation="+"/>
				<entry  key="build.major.number" type="int" default="0" />
				<entry  key="build.minor.number" type="int" default="0" />
				</propertyfile>
			<loadproperties>
				<file file="version.properties"/>
			</loadproperties>
			<propertyfile 
				file="version.properties"
				jdkproperties="true">
				<entry  key="build.number" type="string" value="${build.major.number}.${build.minor.number}.${build.revision.number}"/>
			</propertyfile>
			<mkdir dir="${build.jar.dir}"/>
			<jar destfile="${build.jar.dir}/${team.name}.jar">
				<fileset dir="${build.classes.dir}"/>
				<fileset dir="${basedir}/" includes="*.properties"/>
				<fileset dir="${conf.dir}"/>
				<zipfileset includes="**/*.class" src="lib/log4j-1.2.17.jar"/>
				<manifest>
					<attribute name="Main-Class" 
						value="ee.ut.math.tvt.PATS.Intro"/>
				</manifest>
			</jar>
		</target>
		<target name="jrun" depends="dist" description="Builds and runs JAR file">
			<java jar="${build.jar.dir}/${team.name}.jar" fork="yes"/>
		</target>



</project>